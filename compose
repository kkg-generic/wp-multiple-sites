#!/bin/bash

source $(pwd)/config

echo "...generate docker-compose.yml"
compose_header="version: '2'
"

compose_services="services:
"

compose_proxy_service="  proxy:
    container_name: proxy_server
    image: nginx:latest
    ports:
      - 80:80
      - 443:443
    volumes:
      - ./nginx/proxy.conf:/etc/nginx/nginx.conf
      - ./certs:/etc/nginx/certs
    networks:
      - shared
    depends_on:
"

compose_volumes="volumes:
"
compose_networks="networks:
  shared:
    name: shared
    external: true
"

compose_phpmyadmin_service_start="  phpmyadmin:
    restart: always
    image: phpmyadmin
    container_name: phpmyadmin
    environment:
      PMA_HOSTS: "

compose_phpmyadmin_service_end1="
      # PMA_ARBITRARY: 1
      # PMA_PORT: 3306
      # PMA_USER: bn_wordpress
      # PMA_PASSWORD: 1RNMfMt9gpKZrP2QGaOicb8QYoGbmbS9wE05SDTzzOY=
      # PMA_CONTROLUSER: ${PHPMYADMIN_USER}
      # PMA_CONTROLUSER_PASSWORD: ${PHPMYADMIN_PASSWORD}
      # APACHE_PORT: ${PHPMYADMIN_PORT}
    depends_on:
"

for i in "${!SITE_NAMES[@]}"; do
  SITE_NAME=${SITE_NAMES[$i]}
  FTP_PORT=${FTP_PORT[$i]}
  MIX_PORT=$(echo "$FTP_PORT + 1000 + $i * 10" | bc)
  MAX_PORT=$(echo "$FTP_PORT + 1000 + 10 + $i * 10" | bc)
  compose_services="${compose_services}  ${SITE_NAME}_mariadb:
    restart: always
    container_name: ${SITE_NAME}_mariadb
    image: docker.io/bitnami/mariadb:10.6
    volumes:
      - ${SITE_NAME}_mariadb:/bitnami/mariadb
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - MARIADB_USER=bn_wordpress
      - MARIADB_PASSWORD=1RNMfMt9gpKZrP2QGaOicb8QYoGbmbS9wE05SDTzzOY=
      - MARIADB_DATABASE=bitnami_wordpress
    networks:
      ${SITE_NAME}_internal:
        aliases:
          - mariadb
  ${SITE_NAME}_nginx:
    container_name: ${SITE_NAME}_nginx
    image: nginx:latest
    volumes:
      - ./${SITE_NAME}:/var/www/html
      - ./nginx/server-block.conf:/etc/nginx/conf/server_blocks/_server-block.conf
      - ./nginx/application-block-basic-auth.conf:/etc/nginx/conf/_app.conf
      - ./nginx/${SITE_NAME}.conf:/etc/nginx/nginx.conf
    depends_on:
      - ${SITE_NAME}_php
    restart: always
    networks:
      - shared
      - ${SITE_NAME}_internal
  ${SITE_NAME}_php:
    build:
      context: .
      dockerfile: php.Dockerfile
    volumes:
      - ./${SITE_NAME}:/var/www/html
      - .htpasswd:/var/www/html/.htpasswd
      - ./php:/usr/local/etc/php/conf.d
      - ./php-fpm/www.conf:/usr/local/etc/php-fpm.d/www.conf
    restart: always
    depends_on:
      - ${SITE_NAME}_mariadb
    networks:
      - shared
      - ${SITE_NAME}_internal
  ${SITE_NAME}_redis:
    container_name: ${SITE_NAME}_redis
    image: redis:latest
    restart: always
    networks:
      ${SITE_NAME}_internal:
        aliases:
          - redis
  ${SITE_NAME}_ftp:
    container_name: ${SITE_NAME}_ftp
    depends_on:
      - ${SITE_NAME}_php
    restart: always
    image: delfer/alpine-ftp-server:latest
    volumes:
      - ./${SITE_NAME}:/var/www/html
    environment:
      USERS: \"$HT_PASSWD_USER|$HT_PASSWD_PASSWORD|/var/www/html/\"
      MIN_PORT: $MIX_PORT
      MAX_PORT: $MAX_PORT
    expose:
      - $MIX_PORT-$MAX_PORT
    ports:
      - ${FTP_PORT}:21
      - ${MIX_PORT}-${MAX_PORT}:${MIX_PORT}-${MAX_PORT}
"
  compose_volumes="${compose_volumes}  ${SITE_NAME}_mariadb:
    name: ${SITE_NAME}_mariadb
    external: true
  ${SITE_NAME}_nginx:
    name: ${SITE_NAME}_nginx
    external: true
  ${SITE_NAME}_redis:
    name: ${SITE_NAME}_redis
    external: true
  ${SITE_NAME}_php:
    name: ${SITE_NAME}_php
    external: true
"

  compose_networks="${compose_networks}  ${SITE_NAME}_internal:
"
  compose_phpmyadmin_service_incude="${compose_phpmyadmin_service_incude},${SITE_NAME}_mariadb"
  compose_phpmyadmin_network="${compose_phpmyadmin_network}      - ${SITE_NAME}_internal
"

  compose_proxy_service="${compose_proxy_service}      - ${SITE_NAME}_nginx
"

  compose_php_service="${compose_php_service}      - ${SITE_NAME}_php
"

  compose_phpmyadmin_service_end1="${compose_phpmyadmin_service_end1}      - ${SITE_NAME}_mariadb
"

done

compose_phpmyadmin_service_end2="    ports:
      - ${PHPMYADMIN_PORT}:80
    networks:
      - shared
${compose_phpmyadmin_network}
"

compose_phpmyadmin_service_done="${compose_phpmyadmin_service_start}$(echo "$compose_phpmyadmin_service_incude" | sed 's/,//')${compose_phpmyadmin_service_end1}${compose_phpmyadmin_service_end2}"
docker_compose="${compose_header}${compose_services}${compose_phpmyadmin_service_done}${compose_proxy_service}${compose_volumes}${compose_networks}"

echo "$docker_compose" >docker-compose.yml
